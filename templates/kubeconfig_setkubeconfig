#!/usr/bin/env bash
set -eEuo pipefail

CLUSTER="${cluster_name}"
MAIN_NODE_HOST="${cluster_ip}"
K8S_API="https://${cluster_ip}:6443"
export KUBECONFIG="${cwd}/.kube/config"

###################

for requirement in kubectl ssh jq; do
	which $requirement >/dev/null || {
		echo -e "\e[1mMissing\e[0m: $requirement not found in PATH" >&2
		echo "" >&2
		echo "This script requires: kubectl, ssh, jq" >&2
		exit 1
	}
done

echo "Checking SSH connection to $MAIN_NODE_HOST"
if ! "${cwd}/ssh-node" -q -o BatchMode=yes -o ConnectTimeout=5 cluster exit; then
	echo
	echo "Can't connect... please check your ssh key and config"
	echo
	exit 1
fi

sshrun() {
	"${cwd}/ssh-node" -q cluster "$@"
}

while ! sshrun 'kubectl cluster-info'; do
	echo "Waiting cluster"
	sleep 2
done

rawconfig="$(sshrun kubectl config view -ojson --raw)"

cacert_file=$(mktemp)
cert_file=$(mktemp)
key_file=$(mktemp)

echo "$rawconfig" | jq -r '.clusters[0].cluster["certificate-authority-data"]' | base64 -d >"$cacert_file"
echo "$rawconfig" | jq -r '.users[0].user["client-certificate-data"]' | base64 -d >"$cert_file"
echo "$rawconfig" | jq -r '.users[0].user["client-key-data"]' | base64 -d >"$key_file"

# create cluster entry in local kubectl config
kubectl config set-cluster "$CLUSTER" \
	"--server=$K8S_API" \
	"--certificate-authority=$cacert_file" \
	--embed-certs=true

kubectl config set-credentials "$CLUSTER" \
	"--client-certificate=$cert_file" \
	"--client-key=$key_file" \
	--embed-certs=true

# create oidc user if oidc is enabled
%{ if oidc_enabled ~}
kubectl config set-credentials oidc \
	--exec-api-version=client.authentication.k8s.io/v1beta1 \
	--exec-command=kubectl \
	--exec-arg=oidc-login \
	--exec-arg=get-token \
	"--exec-arg=--oidc-issuer-url=${oidc_issuer_url}" \
	"--exec-arg=--oidc-client-id=${oidc_client_id}" \
	"--exec-arg=--oidc-client-secret=${oidc_client_secret}" \
	--exec-arg=--oidc-extra-scope=profile \
	--exec-arg=--oidc-extra-scope=groups
%{ endif ~}

rm -f "$cacert_file" "$cert_file" "$key_file"

# set the appropriate user
kubectl config set-context "$CLUSTER" \
	"--cluster=$CLUSTER" \
	%{ if oidc_enabled }--user=oidc%{ else }"--user=$CLUSTER"%{ endif }

kubectl config use-context "$CLUSTER"
